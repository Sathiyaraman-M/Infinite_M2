@page "/Project/{Id:guid}"
@inject ProjectHttpClient ProjectHttpClient
@inject UserBookmarkHttpClient UserBookmarkHttpClient
@inject UserLikeHttpClient UserLikeHttpClient
@if (Project is not null)
{
    <div class="page-wrapper">
        <div class="page-header">
            <div class="container-xl">
                <div class="row">
                    <div class="col">
                        <div class="page-title">@Project.Title</div>
                        <div class="d-flex align-items-center mt-1">
                            <div class="d-flex flex-column mt-1">
                                <div class="d-flex mb-2">
                                    @foreach (var author in Project.Authors)
                                    {
                                        <a href="@($"/{author.Id}")">
                                            <span class="badge bg-primary text-uppercase me-2">@author.Name</span>
                                        </a>
                                    }
                                </div>
                                    @if (Project.Ongoing)
                                    {
                                        <h3 class="text-muted">Project Duration: @Project.StartDate.ToString("MMMM d, yyyy") - Ongoing</h3>
                                    }
                                    else
                                    {
                                        <h3 class="text-muted">Project Duration: @Project.StartDate.ToString("MMMM d, yyyy") - @Project.EndDate?.ToString("MMMM d, yyyy")</h3>
                                    }
                            </div>
                            <div class="ms-auto">
                                <div class="btn-list">
                                    <button class="btn @(LikeResponse?.Liked ?? false ? "btn-pink" : "") @(IsAuthenticated ? "": "btn-icon")" @onclick="ToggleLike">
                                        <BSIcon Icon="@TablerIcons.Heart" Color="@(LikeResponse?.Liked ?? false ? Color.Light: Color.Dark)" />
                                        @if (IsAuthenticated)
                                        {
                                            @LikeResponse?.Count.ToString()
                                        }
                                    </button>
                                    @if (IsBookmarked)
                                    {
                                        <button class="btn btn-icon btn-yellow" @onclick="@(() => ToggleBookmark(false))">
                                            <BSIcon Icon="@TablerIcons.Bookmark" Class="icon-filled" />
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-icon" @onclick="@(() => ToggleBookmark(true))">
                                            <BSIcon Icon="@TablerIcons.Bookmark" Color="Color.Dark" />
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="page-body">
            <div class="container-xl">
                <div class="card mb-2">
                    <div class="card-header">
                        <div class="card-title">Description</div>
                    </div>
                    <div class="card-body">
                        @Project.Description
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        <div class="card-title">Elaborate Objectives</div>
                    </div>
                    <div class="card-body">
                        @(new MarkupString(Markdown.ToHtml(Project.ElaborationObjectives)))
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        <div class="card-title">Requirements</div>
                    </div>
                    <div class="card-body">
                        @(new MarkupString(Markdown.ToHtml(Project.Requirements)))
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        <div class="card-title">Tags</div>
                    </div>
                    <div class="card-body">
                        <div class="d-flex flex-wrap">
                            @foreach (var tag in Project.Tags.Trim().Split(',').Where(x => !string.IsNullOrEmpty(x)).Select(x => x.Trim()))
                            {
                                <span class="badge bg-info me-2">@tag</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        <div class="card-title">Abstract</div>
                    </div>
                    <div class="card-body">
                        @Project.Abstract
                    </div>
                </div>
                <div class="card mb-3">
                    <div class="card-header">
                        <div class="card-title">Images</div>
                    </div>
                    <div class="card-body">
                        <div id="carousel-sample" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-indicators">
                                <button type="button" data-bs-target="#carousel-sample" data-bs-slide-to="0" class="active"></button>
                                <button type="button" data-bs-target="#carousel-sample" data-bs-slide-to="1" class=""></button>
                                <button type="button" data-bs-target="#carousel-sample" data-bs-slide-to="2" class=""></button>
                                <button type="button" data-bs-target="#carousel-sample" data-bs-slide-to="3" class=""></button>
                                <button type="button" data-bs-target="#carousel-sample" data-bs-slide-to="4" class=""></button>
                            </div>
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img class="d-block w-100" src="1294117.png"  alt="img1"/>
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="1294117.png" alt="img2" />
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="1294117.png" alt="img3" />
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="1294117.png" alt="img4" />
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="1294117.png" alt="img5" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card mb-3">
                    <div class="card-header">
                        <div class="card-title">Blogs</div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-vcenter">
                                <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Title</th>
                                    <th>Author</th>
                                    <th>Created Date</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var blog in ProjectBlogs.OrderBy(x => x.Index))
                                {
                                    <tr>
                                        <td>@(blog.Index + 1)</td>
                                        <td>
                                            <a href="@($"Blog/{blog.Id}")">@blog.Title</a>
                                        </td>
                                        <td>@blog.AuthorName</td>
                                        <td>@blog.CreatedDate.ToString("MMMM d, yyyy")</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <h2>More from the author</h2>
                @if (RecentFromAuthor != null)
                {
                    @if (RecentFromAuthor.Count != 0)
                    {
                        <div class="row row-deck">
                            @foreach (var project in RecentFromAuthor)
                            {
                                <div class="col-sm-12 col-md-6 col-lg-3">
                                    @* <ArcItem sm="12" md="6" lg="3" style="display: inline-block; min-width: 400px;"> *@
                                    @* <div class="me-2" style="display: inline-block; min-width: 400px;"> *@
                                    <div class="card">
                                        <div class="card-status-start bg-cyan"></div>
                                        <div class="card-body">
                                            <a class="card-title" href="@($"/Project/{project.Id}")">@project.Title</a>
                                            @if (project.Ongoing)
                                            {
                                                <h5>@project.StartDate.ToString("MMMM,yyyy") - Ongoing</h5>
                                            }
                                            else
                                            {
                                                <h5>@project.StartDate.ToString("MMMM,yyyy") - @project.EndDate?.ToString("MMMM,yyyy")</h5>
                                            }
                                            @if (project.TeamProject)
                                            {
                                                <span class="badge bg-teal">Team Project</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-blue">Individual</span>
                                            }
                                            <p class="mt-2">@project.Description</p>
                                            <span class="text-muted">@project.Tags</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="card">
                            <div class="empty">
                                <p class="empty-title">No other projects are added by the Authors!</p>
                                <div class="empty-actions">
                                    <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/Explore"))">
                                        Explore other projects
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    
}
else
{
    <div class="progress progress-sm">
        <div class="progress-bar progress-bar-indeterminate"></div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private FullProjectResponse Project { get; set; }
    private bool IsBookmarked { get; set; }
    private LikeResponse LikeResponse { get; set; }
    private List<MinifiedProjectResponse> RecentFromAuthor { get; set; }
    private bool IsAuthenticated { get; set; }
    
    private List<ProjectBlogResponse> ProjectBlogs { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == Guid.Empty)
        {
            Toast.Add("Invalid Link", "Project not found", Severity.Error);
            NavigationService.NavigateTo("/");
        }
        else
        {
            var result = await ProjectHttpClient.GetFullProject(Id.ToString());
            if (result!.Succeeded)
            {
                Project = result.Data;
                var recentResult = await ProjectHttpClient.GetRecentNProjects(exclude: Id.ToString());
                if (recentResult!.Succeeded)
                {
                    RecentFromAuthor = recentResult.Data;
                }
                IsAuthenticated = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated ?? false;
                if (IsAuthenticated)
                {
                    var isBookmarkedResult = await UserBookmarkHttpClient.IsProjectBookmarked(Id);
                    if (isBookmarkedResult.Succeeded)
                        IsBookmarked = isBookmarkedResult.Data;
                    var blogLikeResult = await UserLikeHttpClient.IsProjectLiked(Id);
                    if (blogLikeResult.Succeeded)
                        LikeResponse = blogLikeResult.Data;
                    var projectBlogsResponse = await ProjectHttpClient.GetProjectBlogs(Id.ToString());
                    if (projectBlogsResponse!.Succeeded)
                        ProjectBlogs = projectBlogsResponse.Data;
                }
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Toast.Add("Error", message, Severity.Error);
                }
                NavigationManager.NavigateTo("/Explore");
            }
        }
        await base.OnParametersSetAsync();
    }

    private async Task ToggleBookmark(bool toggled)
    {
        var toggleBookmarkResult = await UserBookmarkHttpClient.ToggleProjectBookmark(Id);
        if (toggleBookmarkResult.Succeeded)
            IsBookmarked = toggleBookmarkResult.Data;
    }

    private async Task ToggleLike()
    {
        var toggleLikeResult = await UserLikeHttpClient.ToggleProjectLike(Id);
        if (toggleLikeResult.Succeeded)
            LikeResponse = toggleLikeResult.Data;
    }
}